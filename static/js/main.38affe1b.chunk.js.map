{"version":3,"sources":["Components/TodoList/TodoList.module.css","serviceWorker.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Components/TodoList/TodoList.tsx","State/Reducers/TasksReducer/tasksReducer.ts","State/Reducers/TodoLisrReducer/todoListsReducer.ts","AppWithRedux.tsx","State/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","props","useState","tittle","setTittle","error","setError","addTask","trim","addItem","errorText","isTrue","TextField","id","title","label","variant","size","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","style","height","margin","EditableSpan","editMode","setEditMode","localTitle","setLocalTitle","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","newTitle","changeTodoListTitle","todoListID","aria-label","deleteTodoList","listStyle","padding","tasks","map","t","className","isDone","TodoListStyle","Checkbox","changeTaskStatus","checked","removeTask","Button","filter","changeFilter","DELETE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","TODOLIST_ID","v1","TODOLIST_ID_1","initialState","DELETE_TODOLIST","ADD_TODOLIST","CHANGE_FILTER","CHANGE_TITLE","AppWithRedux","useSelector","state","todoLists","dispatch","useDispatch","taskId","toDoListId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTittle","changeTaskTitleAC","removeTodoListAC","changeTitleAC","todoListId","changeFilterAC","todoListComponents","tl","i","tasksForTodolist","getFilteredTasks","Grid","item","Paper","elevation","textAlign","AppBar","position","Toolbar","edge","Typography","Container","fixed","container","spacing","action","addTodoListAC","rootReducer","combineReducers","el","todoList","todoListWithNewTitle","find","newTask","console","log","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.38affe1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is-done\":\"TodoList_is-done__3cEJe\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineTwoToneIcon from '@material-ui/icons/AddCircleOutlineTwoTone';\r\n\r\ntype AddItemFromPropsType = {\r\n    addItem: (title: string) => void;\r\n};\r\ntype ErrorType = {\r\n    errorText: string;\r\n    isTrue: boolean;\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFromPropsType) {\r\n\r\n    const [tittle, setTittle] = useState<string>('');\r\n    const [error, setError] = useState<null | ErrorType>(null);\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTittle(e.currentTarget.value);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n       if(e.key === 'Enter') {\r\n           addTask();\r\n       }\r\n\r\n    };\r\n    const addTask = () => {\r\n        if(!tittle.trim()) {\r\n            setError({errorText: 'надо ввести текст задачи!', isTrue: true});\r\n        }\r\n        else {\r\n            setError(null);\r\n            props.addItem(tittle.trim());\r\n            setTittle('');\r\n        }\r\n    };\r\n    return <div>\r\n        <TextField id=\"outlined-basic\"\r\n                   title={'Type text...'}\r\n                   label=\"Make It\"\r\n                   variant=\"outlined\"\r\n                   size={'small'}\r\n                   value={tittle}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error?.isTrue}\r\n                   helperText={error?.isTrue && 'Пожалуйста заполните поле'}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'} style={{height: '20px', margin: '10px'}}>\r\n            <AddCircleOutlineTwoToneIcon/>\r\n        </IconButton>\r\n\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    changeTitle: (newTitle: string) => void;\r\n    // taskId: string;\r\n    // todoListID: string; //todo лучше перенести на вверх что бы меньше пропсов принимать\r\n}\r\n\r\nexport function     EditableSpan({title, ...props}: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false); // TODO вторая фнункция созданная useState нужна для того что бы менять стейт\r\n    const [localTitle, setLocalTitle] = useState<string>('');\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setLocalTitle(title);\r\n    };\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.changeTitle(localTitle);\r\n    };\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalTitle(e.currentTarget.value);\r\n        // props.changeTitle(props.taskId, props.todoListID, e.currentTarget.value) //TODO при таком раскладе каждый введеный символ будет отправляться на серва, а правильно было бы сделать единожды сохраненные Title state отправить на сервак при Blur\r\n    };\r\n\r\n    return (\r\n        editMode ?\r\n            <span>\r\n                  {/*<input type={'text'} value={localTitle} onBlur={activateViewMode} autoFocus onChange={onChangeTitleHandler}/>*/}\r\n                 <TextField id=\"outlined-basic\" label=\"Задача\" size={'small'} value={localTitle} onBlur={activateViewMode} autoFocus onChange={onChangeTitleHandler}  />\r\n            </span>\r\n\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport TodoListStyle from './TodoList.module.css'\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {FilterValuesType} from '../../AppWithRedux';\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport HighlightOffTwoToneIcon from '@material-ui/icons/HighlightOffTwoTone';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\n\r\ntype PropsType = {\r\n    todoListID: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    removeTask: (taskId: string, todoListId: string) => void;\r\n    deleteTodoList: (todoListID: string) => void;\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void;\r\n    addTask: (title: string, todoListId: string) => void;\r\n    changeTaskStatus: (toDoListId: string, taskId: string, isDone: boolean) => void;\r\n    changeTitle: (todoListID: string, taskId: string, newTitle: string) => void;\r\n    changeTodoListTitle: (todoListID: string, newTitle: string) => void;\r\n    filter: FilterValuesType;\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todoListID);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.todoListID);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todoListID);\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID)\r\n    }\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListID, newTitle);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n            <IconButton aria-label=\"delete\" onClick={() => props.deleteTodoList(props.todoListID)}>\r\n                <HighlightOffTwoToneIcon color={'secondary'}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: '5px'}}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const  onClickHandler = () => props.removeTask(t.id, props.todoListID)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todoListID, t.id, e.currentTarget.checked);\r\n                    }\r\n                    const changeTaskTitleHandler = (newTitle: string) => {\r\n                        props.changeTitle(props.todoListID, t.id, newTitle);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? TodoListStyle['is-done'] : \"\"}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={\"primary\"}\r\n                            onChange={onChangeHandler}\r\n                            checked={t.isDone}\r\n                        />\r\n\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitleHandler}/>\r\n                        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n                            <DeleteIcon color={'secondary'}/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button color={'default'}\r\n                    variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={'primary'}\r\n                    variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={'secondary'}\r\n                    variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {TasksStateType} from \"../../../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {TaskType} from \"../../../Components/TodoList/TodoList\";\r\nimport {AddTodoListAT, DeleteTodoListAT} from \"../TodoLisrReducer/todoListsReducer\";\r\n\r\n//const\r\nconst DELETE_TASK = 'DELETE_TASK' as const;\r\nconst ADD_TASK = 'ADD_TASK' as const;\r\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS' as const;\r\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE' as const;\r\n\r\n\r\n//type\r\ntype RemoveTasksType = {\r\n    type: typeof DELETE_TASK;\r\n    taskId: string;\r\n    toDoListId: string;\r\n};\r\n\r\ntype AddTasksType = {\r\n    type: typeof ADD_TASK;\r\n    toDoListId: string;\r\n    title: string;\r\n};\r\n\r\ntype ChangeTaskStatus = {\r\n    type: typeof CHANGE_TASK_STATUS;\r\n    toDoListId: string;\r\n    taskId: string;\r\n    isDone: boolean\r\n};\r\n\r\ntype ChangeTaskTitleType = {\r\n    type: typeof CHANGE_TASK_TITLE;\r\n    toDoListId: string;\r\n    taskId: string;\r\n    newTittle: string;\r\n};\r\nexport type ActionType = RemoveTasksType | AddTasksType | ChangeTaskStatus  | ChangeTaskTitleType | AddTodoListAT | DeleteTodoListAT;\r\n\r\n\r\nexport const TODOLIST_ID = v1();\r\nexport const TODOLIST_ID_1 = v1();\r\n\r\nconst initialState: TasksStateType = {\r\n    [TODOLIST_ID]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false}\r\n    ],\r\n    [TODOLIST_ID_1]: [\r\n        {id: v1(), title: \"Купить кошку\", isDone: true},\r\n        {id: v1(), title: \"Бросить курить\", isDone: true},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case DELETE_TASK: {\r\n            return {\r\n            ...state,\r\n                    [action.toDoListId]: state[action.toDoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        }\r\n        case ADD_TASK: {\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone:  false\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: [newTask,...state[action.toDoListId]]\r\n            }\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n             return {\r\n                 ...state,\r\n                 [action.toDoListId]: state[action.toDoListId].map(t => t.id === action.taskId ?  {...t, isDone: action.isDone } : t)\r\n             }\r\n        }\r\n        case CHANGE_TASK_TITLE:\r\n            console.log(state, action.toDoListId)\r\n              return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => t.id === action.taskId ?  {...t, title: action.newTittle } : t)\r\n            }\r\n\r\n        case \"ADD_TODOLIST\":\r\n            return {[action.todoListId]: [], ...state };\r\n        case \"DELETE_TODOLIST\":\r\n            const copyState = {...state}\r\n            delete copyState[action.todoListID];\r\n            return copyState;\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\n//ActionCreators\r\nexport const removeTaskAC = (taskId: string, toDoListId: string): RemoveTasksType => {\r\n  return {\r\n      type: DELETE_TASK, taskId, toDoListId\r\n  }\r\n}\r\nexport const addTaskAC = (title: string, toDoListId: string): AddTasksType => {\r\n    return {\r\n        type: ADD_TASK, toDoListId, title\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (toDoListId: string, taskId: string, isDone: boolean): ChangeTaskStatus => {\r\n    return {\r\n        type: CHANGE_TASK_STATUS, toDoListId, taskId, isDone\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (toDoListId: string, taskId: string, newTittle: string): ChangeTaskTitleType => {\r\n    return {\r\n        type: CHANGE_TASK_TITLE, toDoListId, taskId, newTittle\r\n    }\r\n}","import {FilterValuesType, TodoListType} from \"../../../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {TODOLIST_ID, TODOLIST_ID_1} from \"../TasksReducer/tasksReducer\";\r\n\r\n//const\r\nconst DELETE_TODOLIST = 'DELETE_TODOLIST';\r\nconst ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst CHANGE_FILTER = 'CHANGE_FILTER';\r\nconst CHANGE_TITLE = 'CHANGE_TITLE';\r\n\r\n\r\n//type\r\nexport type DeleteTodoListAT = {\r\n    type: 'DELETE_TODOLIST';\r\n    todoListID: string;\r\n};\r\nexport type AddTodoListAT = {\r\n    type: 'ADD_TODOLIST';\r\n    todoListId: string;\r\n    title: string\r\n};\r\n\r\ntype ChangeFilterAT = {\r\n    type: 'CHANGE_FILTER';\r\n    filter: FilterValuesType;\r\n    todoListId: string;\r\n};\r\ntype ChangeTitleAT = {\r\n    type: 'CHANGE_TITLE';\r\n    todoListID: string;\r\n    newTitle: string;\r\n};\r\n\r\nexport type ActionType = ChangeFilterAT | AddTodoListAT | DeleteTodoListAT | ChangeTitleAT;\r\n\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    {id: TODOLIST_ID, title: 'What to learn', filter: 'all'},\r\n    {id: TODOLIST_ID_1, title: 'What To Buy', filter: 'all'},\r\n]\r\n//mainReducer\r\nexport const todoListsReducer = (todoLists: Array<TodoListType> = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case DELETE_TODOLIST:\r\n            return todoLists.filter((el) => {\r\n                return el.id !== action.todoListID;\r\n            })\r\n        case ADD_TODOLIST:\r\n            const todoList: TodoListType = {\r\n                id: action.todoListId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            };\r\n            return [...todoLists, todoList]\r\n        case CHANGE_FILTER:\r\n            return todoLists.map((tl) => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        case CHANGE_TITLE:\r\n            let todoListWithNewTitle = todoLists.find(tl => tl.id === action.todoListID);\r\n            if (todoListWithNewTitle) {\r\n                todoListWithNewTitle.title = action.newTitle;\r\n            }\r\n            return [...todoLists]\r\n        default:\r\n            return todoLists;\r\n    }\r\n};\r\n\r\n\r\n//ActionCreators\r\nexport const removeTodoListAC = (todoListID: string): DeleteTodoListAT => {\r\n  return {\r\n      type: DELETE_TODOLIST,\r\n      todoListID\r\n  }\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListAT => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        todoListId: v1(),\r\n        title\r\n    }\r\n}\r\nexport const changeFilterAC = (filter: FilterValuesType, todoListId: string): ChangeFilterAT => {\r\n    return {\r\n        type: CHANGE_FILTER,\r\n        filter: filter,\r\n        todoListId\r\n    }\r\n}\r\nexport const changeTitleAC = (todoListID: string, newTitle: string): ChangeTitleAT => {\r\n    return {\r\n        type: CHANGE_TITLE,\r\n        todoListID,\r\n        newTitle,\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './Components/TodoList/TodoList';\r\n\r\nimport {AddItemForm} from \"./Components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {\r\n    addTodoListAC,\r\n    changeFilterAC,\r\n    changeTitleAC,\r\n    removeTodoListAC,\r\n\r\n} from \"./State/Reducers/TodoLisrReducer/todoListsReducer\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n\r\n} from \"./State/Reducers/TasksReducer/tasksReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./State/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterValuesType\r\n};\r\nexport  type TasksStateType = {\r\n    [key: string]: Array<TaskType>;\r\n};\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const tasks = useSelector<AppStateType, TasksStateType>(state => state.tasks);\r\n    const todoLists = useSelector<AppStateType, Array<TodoListType>>(state => state.todoLists);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        dispatch(removeTaskAC(taskId,todoListID));\r\n    }\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(addTaskAC(title,todoListID));\r\n    }\r\n    function changeStatus(toDoListId: string, taskId: string, isDone: boolean) {\r\n        dispatch(changeTaskStatusAC(toDoListId, taskId, isDone))\r\n    }\r\n    function changeTitle(toDoListId: string, taskId: string, newTittle: string) {\r\n        debugger;\r\n        dispatch(changeTaskTitleAC(toDoListId, taskId, newTittle));\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        let action = addTodoListAC(title)\r\n        dispatch(action);\r\n    };\r\n    const deleteTodoList = (todoListID: string) => {\r\n        dispatch(removeTodoListAC(todoListID));\r\n    };\r\n    function changeTodoListTitle(todoListID: string, newTitle: string) {\r\n        dispatch(changeTitleAC(todoListID, newTitle));\r\n    }\r\n    function changeFilter(filter: FilterValuesType, todoListId: string) {\r\n        dispatch(changeFilterAC(filter, todoListId))\r\n    }\r\n\r\n\r\n\r\n\r\n//UI\r\n    function getFilteredTasks(tl: TodoListType) {\r\n        switch (tl.filter) {\r\n            case \"active\":\r\n                return tasks[tl.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[tl.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[tl.id]\r\n        }\r\n    }\r\n\r\n\r\n    const todoListComponents = todoLists.map((tl, i) => {\r\n        const tasksForTodolist = getFilteredTasks(tl);\r\n\r\n        return <Grid item>\r\n            <Paper elevation={6} style={{padding: '15px', textAlign: 'center'}}>\r\n                <TodoList\r\n                    key={i}\r\n                    todoListID={tl.id}\r\n                    title={tl.title}\r\n                    filter={tl.filter}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    deleteTodoList={deleteTodoList}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    changeTitle={changeTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}} spacing={1}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./Reducers/TodoLisrReducer/todoListsReducer\";\r\nimport {tasksReducer} from \"./Reducers/TasksReducer/tasksReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);\r\n//type storeType = typeof  store;\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./State/store\";\r\n\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux />\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}