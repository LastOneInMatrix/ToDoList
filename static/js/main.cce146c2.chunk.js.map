{"version":3,"sources":["Components/TodoList/TodoList.module.css","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Components/TodoList/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","tittle","setTittle","error","setError","addTask","trim","addItem","errorText","isTrue","TextField","id","title","label","variant","size","value","onChange","e","console","log","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","style","height","margin","EditableSpan","editMode","setEditMode","localTitle","setLocalTitle","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","newTitle","changeTodoListTitle","todoListID","aria-label","deleteTodoList","listStyle","padding","tasks","map","t","className","isDone","TodoListStyle","Checkbox","changeTaskStatus","checked","removeTask","Button","filter","changeFilter","App","TODOLIST_ID","v1","TODOLIST_ID_1","todoLists","setTodoList","setTasks","taskId","newTask","copyTask","changeStatus","copyTasks","filteredTodoLists","el","todoList","find","tl","todoListId","todoListComponents","i","tasksForTodolist","getFilteredTasks","Grid","item","Paper","elevation","textAlign","AppBar","position","Toolbar","edge","Typography","Container","fixed","container","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cce146c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"is-done\":\"TodoList_is-done__3cEJe\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineTwoToneIcon from '@material-ui/icons/AddCircleOutlineTwoTone';\r\n\r\ntype AddItemFromPropsType = {\r\n    addItem: (title: string) => void;\r\n};\r\ntype ErrorType = {\r\n    errorText: string;\r\n    isTrue: boolean;\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFromPropsType) {\r\n\r\n    const [tittle, setTittle] = useState<string>('');\r\n    const [error, setError] = useState<null | ErrorType>(null);\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        console.log(e.currentTarget.value);\r\n        setTittle(e.currentTarget.value)\r\n\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n       if(e.key === 'Enter') {\r\n           addTask();\r\n       }\r\n\r\n    };\r\n    const addTask = () => {\r\n        if(!tittle.trim()) {\r\n            setError({errorText: 'надо ввести текст задачи!', isTrue: true});\r\n        }\r\n        else {\r\n            setError(null);\r\n            props.addItem(tittle.trim());\r\n            setTittle('');\r\n        }\r\n    };\r\n    return <div>\r\n        <TextField id=\"outlined-basic\"\r\n                   title={'Type text...'}\r\n                   label=\"Make It\"\r\n                   variant=\"outlined\"\r\n                   size={'small'}\r\n                   value={tittle}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={error?.isTrue}\r\n                   helperText={error?.isTrue && 'Пожалуйста заполните поле'}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'} style={{height: '20px', margin: '10px'}}>\r\n            <AddCircleOutlineTwoToneIcon/>\r\n        </IconButton>\r\n\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    changeTitle: (newTitle: string) => void;\r\n    // taskId: string;\r\n    // todoListID: string; //todo лучше перенести на вверх что бы меньше пропсов принимать\r\n}\r\n\r\nexport function     EditableSpan({title, ...props}: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false); // TODO вторая фнункция созданная useState нужна для того что бы менять стейт\r\n    const [localTitle, setLocalTitle] = useState<string>('');\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setLocalTitle(title);\r\n    };\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.changeTitle(localTitle);\r\n    };\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalTitle(e.currentTarget.value);\r\n        // props.changeTitle(props.taskId, props.todoListID, e.currentTarget.value) //TODO при таком раскладе каждый введеный символ будет отправляться на серва, а правильно было бы сделать единожды сохраненные Title state отправить на сервак при Blur\r\n    };\r\n\r\n    return (\r\n        editMode ?\r\n            <span>\r\n                  {/*<input type={'text'} value={localTitle} onBlur={activateViewMode} autoFocus onChange={onChangeTitleHandler}/>*/}\r\n                 <TextField id=\"outlined-basic\" label=\"Задача\" size={'small'} value={localTitle} onBlur={activateViewMode} autoFocus onChange={onChangeTitleHandler}  />\r\n            </span>\r\n\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport TodoListStyle from './TodoList.module.css'\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {FilterValuesType} from '../../App';\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport HighlightOffTwoToneIcon from '@material-ui/icons/HighlightOffTwoTone';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\n\r\ntype PropsType = {\r\n    todoListID: string;\r\n    title: string;\r\n    tasks: Array<TaskType>;\r\n    removeTask: (taskId: string, todoListId: string) => void;\r\n    deleteTodoList: (todoListID: string) => void;\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void;\r\n    addTask: (title: string, todoListId: string) => void;\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void;\r\n    changeTitle: (taskId: string, todoListID: string, newTitle: string) => void;\r\n    changeTodoListTitle: (todoListID: string, newTitle: string) => void;\r\n    filter: FilterValuesType;\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todoListID);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.todoListID);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todoListID);\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID)\r\n    }\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListID, newTitle);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n            <IconButton aria-label=\"delete\" onClick={() => props.deleteTodoList(props.todoListID)}>\r\n                <HighlightOffTwoToneIcon color={'secondary'}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: '5px'}}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const  onClickHandler = () => props.removeTask(t.id, props.todoListID)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID);\r\n                    }\r\n                    const changeTaskTitleHandler = (newTitle: string) => {\r\n                        props.changeTitle(t.id, props.todoListID, newTitle);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? TodoListStyle['is-done'] : \"\"}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={\"primary\"}\r\n                            onChange={onChangeHandler}\r\n                            checked={t.isDone}\r\n                        />\r\n\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitleHandler}/>\r\n                        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n                            <DeleteIcon color={'secondary'}/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button color={'default'}\r\n                    variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={'primary'}\r\n                    variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={'secondary'}\r\n                    variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './Components/TodoList/TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./Components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterValuesType\r\n};\r\nexport  type TasksStateType = {\r\n    [key: string]: Array<TaskType>;\r\n};\r\nfunction App() {\r\n    const TODOLIST_ID = v1();\r\n    const TODOLIST_ID_1 = v1();\r\n    let [todoLists, setTodoList] = useState<Array<TodoListType>>([\r\n        {id: TODOLIST_ID, title: 'What to learn', filter: 'all'},\r\n        {id: TODOLIST_ID_1, title: 'What To Buy', filter: 'all'},\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [TODOLIST_ID]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [TODOLIST_ID_1]: [\r\n            {id: v1(), title: \"Купить кошку\", isDone: true},\r\n            {id: v1(), title: \"Бросить курить\", isDone: true},\r\n        ]\r\n    })\r\n\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskId);\r\n        setTasks({...tasks});\r\n    }\r\n    function addTask(title: string, todoListID: string) {\r\n        let newTask = {id: v1(), title, isDone: false};\r\n        const copyTask = {...tasks};\r\n        copyTask[todoListID] = [newTask, ...tasks[todoListID]];\r\n        setTasks(copyTask);\r\n    }\r\n    function changeStatus(taskId: string, isDone: boolean, todoListID: string) {\r\n        let copyTasks = {...tasks};\r\n        copyTasks[todoListID] = copyTasks[todoListID].map(t => t.id === taskId ? {...t, isDone} : t);\r\n        setTasks(copyTasks);\r\n    }\r\n    function changeTitle(taskId: string, todoListID: string, newTitle: string) {\r\n        let copyTasks = {...tasks};\r\n        copyTasks[todoListID] = copyTasks[todoListID].map(t => t.id === taskId ? {...t, title: newTitle} : t);\r\n        setTasks(copyTasks);\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const todoList: TodoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: 'all'\r\n        };\r\n        setTodoList([todoList, ...todoLists]);\r\n        setTasks({...tasks, [todoList.id]: []})\r\n    }\r\n    const deleteTodoList = (todoListID: string) => {\r\n\r\n        const filteredTodoLists = todoLists.filter((el) => {\r\n            return el.id !== todoListID;\r\n        });\r\n        setTodoList(filteredTodoLists);\r\n\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID];\r\n        setTasks(copyTasks);\r\n    }\r\n    function changeTodoListTitle(todoListID: string, newTitle: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID);\r\n        if (todoList) {\r\n            todoList.title = newTitle;\r\n            console.log(todoLists);\r\n            setTodoList([...todoLists]);\r\n        }\r\n    }\r\n    function changeFilter(filter: FilterValuesType, todoListId: string) {\r\n        setTodoList(todoLists.map((tl) => tl.id === todoListId ? {...tl, filter: filter} : tl));\r\n        // {...tl, filter: filter} РАЗВЕРНУТЬ СВОЙСТВА ОБЪЕКТА, И ЗАМЕНИТЬ ЗНАЧЕНИЕ СВОЙСТВА filter\r\n    }\r\n\r\n\r\n\r\n\r\n//UI\r\n    function getFilteredTasks(tl: TodoListType) {\r\n        switch (tl.filter) {\r\n            case \"active\":\r\n                return tasks[tl.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[tl.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[tl.id]\r\n        }\r\n    }\r\n    const todoListComponents = todoLists.map((tl, i) => {\r\n        const tasksForTodolist = getFilteredTasks(tl);\r\n\r\n        return <Grid item>\r\n            <Paper elevation={6} style={{padding: '15px', textAlign: 'center'}}>\r\n                <TodoList\r\n                    key={i}\r\n                    todoListID={tl.id}\r\n                    title={tl.title}\r\n                    filter={tl.filter}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    deleteTodoList={deleteTodoList}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    changeTitle={changeTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}} spacing={1}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}